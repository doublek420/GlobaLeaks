#!/usr/bin/env python
# -*- encoding: utf-8 -*-
from __future__ import print_function

import os
import platform
import sys

# Use UTF-8 for all string to unicode conversions
reload(sys)
sys.setdefaultencoding('utf8')

# Avoid writing bytecode files at runtime
sys.dont_write_bytecode = True

this_directory = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(this_directory, '..'))
sys.path.insert(0, root)

print("Starting GlobaLeaks . . .")

distro='unknown'
if platform.system() == 'Linux':
    distro = platform.linux_distribution()[2]

if distro != 'xenial':
    print("WARNING: The up-to-date long term support platform is Ubuntu Xenial (16.04)")
    print("WARNING: It is recommended to perform the platform update whenever possible")
    print("WARNING: Read more about platform update at: https://github.com/globaleaks/GlobaLeaks/wiki/Upgrade-Guide#platform-update")

if distro in ('trusty', 'precise', 'wheezy', 'jessie'):
    from globaleaks.utils.pip_utils import pip_version_check

    requirements_path = os.path.join(root, 'requirements.txt')
    if not os.path.exists(requirements_path):
        requirements_path = '/usr/share/globaleaks/requirements.txt'

    pip_version_check(requirements_path)

from twisted.python import usage
from twisted.scripts._twistd_unix import ServerOptions, UnixApplicationRunner


from globaleaks import DATABASE_VERSION
from globaleaks.db import update_db
from globaleaks.utils.utility import log, query_yes_no
from globaleaks.utils.mailutils import mail_exception_handler
from globaleaks.settings import GLSettings

GLSettings.parser.add_option("-n", "--nodaemon", action='store_true',
    help="don't daemonize",
    dest="nodaemon", default=False)

GLSettings.parser.add_option("-l", "--loglevel", type="choice",
    choices=['CRITICAL', 'ERROR', 'INFO', 'DEBUG', 'TIMEDEBUG'],
    help="set log level [default: %default]",
    dest="loglevel", default="ERROR")

GLSettings.parser.add_option("-i", "--ip", type="string",
    help="IP address used for listening [default: %default]",
    dest="ip", default=GLSettings.bind_address)

GLSettings.parser.add_option("-p", "--port", type="int",
    help="TCP port used for listening [default: %default]",
    dest="port", default=GLSettings.bind_port)

GLSettings.parser.add_option("-s", "--socks-host", type="string",
    help="set Socks host to use for Tor [default: %default]",
    dest="socks_host", default=GLSettings.socks_host)

GLSettings.parser.add_option("-r", "--socks-port", type="int",
    help="set Socks port to use for Tor [default: %default]",
    dest="socks_port", default=GLSettings.socks_port)

GLSettings.parser.add_option("-t", "--side-channels-guard", type="int",
    help="security guard time to which uniform request times to reduce side channels analysis (ms) [default: 150]",
    dest="side_channels_guard", default=150)

GLSettings.parser.add_option("-b", "--disable-backend-exception-notification", action='store_true',
    help="disable backend_exception_notification [default: False]",
    dest="disable_backend_exception_notification", default=False)

GLSettings.parser.add_option("-e", "--disable-client-exception-notification", action='store_true',
    help="disable_client_exception_notification [default: False]",
    dest="disable_client_exception_notification", default=False)

GLSettings.parser.add_option("-m", "--disks-alarm-threshold", type='int',
    help="takes 1, 2, 3, set disk alarm threshold [default: 0]",
    dest="disk_alarm_threshold", default=0)

GLSettings.parser.add_option("-u", "--user", type="string",
    help="set the user to run as [default: current_user]",
    dest="user")

GLSettings.parser.add_option("-g", "--group", type="string",
    help="set the group to run as [default: current_user]",
    dest="group")

GLSettings.parser.add_option("-w", "--working-path", type="string",
    help="set the backend working directory",
    dest="working_path", default=None)

GLSettings.parser.add_option("-c", "--start-clean", action='store_true',
    help="start a clean globaleks install [default: %default]",
    dest="start_clean", default=False)

GLSettings.parser.add_option("-k", "--kill", type="int",
    help="signal to send to the current globaleaks process (if exists)",
    dest="kill", default=0)

GLSettings.parser.add_option("-A", "--api-prefix", type='string',
    help="specify an API prefix",
    dest="api_prefix", default='')

GLSettings.parser.add_option("-C", "--client-path", type='string',
    help="specify client path",
    dest="client_path", default=None)

GLSettings.parser.add_option("-P", "--disable-swap", action='store_true',
    help="disable process swap [default: False]",
    dest="disable_swap", default=False)

GLSettings.parser.add_option("-R", "--ramdisk", type="string",
    help="optionally specify a path used as ramdisk storage",
    dest="ramdisk")

GLSettings.parser.add_option("-z", "--devel-mode", type='string',
    help="hacks some config. Specify your name to receive personalized exceptions [default: %default]."\
         "Note that all exceptions when this mode is enabled are routed to globaleaks-stackexception-devel@globaleaks.org",
    dest="developer_name")

GLSettings.parser.add_option("-o", "--orm-debug", action='store_true',
    help="enable ORM debugging (AVAILABLE ONLY IN DEVEL MODE)",
    dest="orm_debug", default=False)

GLSettings.parser.add_option("-j", "--request-log", action="store_true",
    help="enable request/response logging (AVAILABLE ONLY IN DEVEL MODE)",
    dest="log_requests_responses", default=False)

GLSettings.parser.add_option("-v", "--version", action='store_true',
    help="show the version of the software")


# here the options are parsed, because sys.argv array is whack below
(GLSettings.cmdline_options, args) = GLSettings.parser.parse_args()

if GLSettings.cmdline_options.version:
    print("GlobaLeaks version:", GLSettings.version_string)
    print("Database version:", DATABASE_VERSION)
    sys.exit(53)

GLSettings.load_cmdline_options()

if GLSettings.cmdline_options.kill:
    try:
        with open(GLSettings.pidfile_path, "r") as fd:
            target_pid = int(fd.read())
        os.kill(target_pid, GLSettings.cmdline_options.kill)
        os.remove(GLSettings.pidfile_path)
    except Exception as excep:
        print("Unable kill PID found in %s: kill option ignored (%s)" % (GLSettings.pidfile_path, excep))

if GLSettings.start_clean:
    if GLSettings.devel_mode or \
      query_yes_no("Globaleaks --start-clean is going to delete %s\nAre you sure?" % GLSettings.working_path, "no"):
        GLSettings.remove_directories()

os.umask(077)
# TODO move function calls out of bin/globaleaks and into backend.py
GLSettings.create_directories()
GLSettings.cleaning_dead_files()

backend_script = os.path.join(GLSettings.root_path, 'globaleaks', 'backend.py')

args =['-y', backend_script]
if GLSettings.nodaemon:
    args += ['-n']

args +=['--pidfile', GLSettings.pidfile_path]

sys.argv[1:] = args

def run_backend():
    # Check presence of an existing database and eventually perform its migration
    update_db()

    sys.excepthook = mail_exception_handler
    config = ServerOptions()
    try:
        config.parseOptions()
    except usage.error, ue:
        print("%s: %s" % (sys.argv[0], ue))
        sys.exit(50) # differentiated error codes lets a script change behaivor based on output
    try:
        # This blocks until the app exits
        UnixApplicationRunner(config).run()
        print("Exiting GlobaLeaks")
    except Exception as excep:
        print("Unable to start GlobaLeaks: %s" % excep)
        sys.exit(51)

# "Now his watch begins"
run_backend()
# "Now his watch ends"
